/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

declare global {
  type NexusGen = NexusGenTypes;
}

export interface NexusGenInputs {
  CreateMatch: {
    // input type
    id: number; // Int!
    name: string; // String!
  };
  CreatePlayer: {
    // input type
    id: number; // Int!
    name: string; // String!
  };
  CreateTeam: {
    // input type
    id: number; // Int!
    name: string; // String!
  };
  UpdateMatch: {
    // input type
    id: number; // Int!
    name: string; // String!
  };
  UpdatePlayer: {
    // input type
    id: number; // Int!
    name: string; // String!
  };
  UpdateTeam: {
    // input type
    id: number; // Int!
    name: string; // String!
  };
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenObjects {
  DeleteMatchResult: {
    // root type
    id: number; // Int!
  };
  DeletePlayerResult: {
    // root type
    id: number; // Int!
  };
  DeleteTeamResult: {
    // root type
    id: number; // Int!
  };
  Match: {
    // root type
    id: number; // Int!
    name: string; // String!
  };
  Mutation: {};
  Player: {
    // root type
    id: number; // Int!
    name: string; // String!
  };
  Query: {};
  Team: {
    // root type
    id: number; // Int!
    name: string; // String!
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  DeleteMatchResult: {
    // field return type
    id: number; // Int!
  };
  DeletePlayerResult: {
    // field return type
    id: number; // Int!
  };
  DeleteTeamResult: {
    // field return type
    id: number; // Int!
  };
  Match: {
    // field return type
    id: number; // Int!
    name: string; // String!
  };
  Mutation: {
    // field return type
    addMatch: NexusGenRootTypes['Match']; // Match!
    addPlayer: NexusGenRootTypes['Player']; // Player!
    addTeam: NexusGenRootTypes['Team']; // Team!
    deleteMatch: NexusGenRootTypes['DeleteMatchResult']; // DeleteMatchResult!
    deletePlayer: NexusGenRootTypes['DeletePlayerResult']; // DeletePlayerResult!
    deleteTeam: NexusGenRootTypes['DeleteTeamResult']; // DeleteTeamResult!
    updateMatch: NexusGenRootTypes['Match']; // Match!
    updatePlayer: NexusGenRootTypes['Player']; // Player!
    updateTeam: NexusGenRootTypes['Team']; // Team!
  };
  Player: {
    // field return type
    id: number; // Int!
    name: string; // String!
  };
  Query: {
    // field return type
    match: NexusGenRootTypes['Match']; // Match!
    matches: NexusGenRootTypes['Match'][]; // [Match!]!
    player: NexusGenRootTypes['Player']; // Player!
    players: NexusGenRootTypes['Player'][]; // [Player!]!
    team: NexusGenRootTypes['Team']; // Team!
    teams: NexusGenRootTypes['Team'][]; // [Team!]!
  };
  Team: {
    // field return type
    id: number; // Int!
    name: string; // String!
  };
}

export interface NexusGenFieldTypeNames {
  DeleteMatchResult: {
    // field return type name
    id: 'Int';
  };
  DeletePlayerResult: {
    // field return type name
    id: 'Int';
  };
  DeleteTeamResult: {
    // field return type name
    id: 'Int';
  };
  Match: {
    // field return type name
    id: 'Int';
    name: 'String';
  };
  Mutation: {
    // field return type name
    addMatch: 'Match';
    addPlayer: 'Player';
    addTeam: 'Team';
    deleteMatch: 'DeleteMatchResult';
    deletePlayer: 'DeletePlayerResult';
    deleteTeam: 'DeleteTeamResult';
    updateMatch: 'Match';
    updatePlayer: 'Player';
    updateTeam: 'Team';
  };
  Player: {
    // field return type name
    id: 'Int';
    name: 'String';
  };
  Query: {
    // field return type name
    match: 'Match';
    matches: 'Match';
    player: 'Player';
    players: 'Player';
    team: 'Team';
    teams: 'Team';
  };
  Team: {
    // field return type name
    id: 'Int';
    name: 'String';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    addMatch: {
      // args
      data: NexusGenInputs['CreateMatch']; // CreateMatch!
    };
    addPlayer: {
      // args
      data: NexusGenInputs['CreatePlayer']; // CreatePlayer!
    };
    addTeam: {
      // args
      data: NexusGenInputs['CreateTeam']; // CreateTeam!
    };
    deleteMatch: {
      // args
      id: number; // Int!
    };
    deletePlayer: {
      // args
      id: number; // Int!
    };
    deleteTeam: {
      // args
      id: number; // Int!
    };
    updateMatch: {
      // args
      data: NexusGenInputs['UpdateMatch']; // UpdateMatch!
    };
    updatePlayer: {
      // args
      data: NexusGenInputs['UpdatePlayer']; // UpdatePlayer!
    };
    updateTeam: {
      // args
      data: NexusGenInputs['UpdateTeam']; // UpdateTeam!
    };
  };
  Query: {
    match: {
      // args
      id: number; // Int!
    };
    player: {
      // args
      id: number; // Int!
    };
    team: {
      // args
      id: number; // Int!
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
